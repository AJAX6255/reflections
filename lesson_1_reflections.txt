How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    Frankly, the close proximity/visual association between changes made it easyer to itentify the typo.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    As learning is an incremental process - and as memory of arcane changes in code fades with time, the history as preserved is an extension of a programmers mind.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Automatic saves are best for rote data input, Manual commits allow a systematic increment series of controlled versions of code.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Git is specifically written for version control of code, Google Docs is written more with documents of various formats in mind.

How can you use the commands git log and git diff to view the history of files?

    Git log is a sequential log of the commits and and indicator of the magnitude of change. Git diff shows the color differentiated changes for additions/deletions and changes between two selected commits.

How might using version control make you more confident to make changes that
could break something?

    When compling/building a new version of code it is not unusual for me to find secondary issues caused by the new commit. It allows me to back out and retry (trial and error) mechanisms of debugging my code.

Now that you have your workspace set up, what do you want to try using Git for?

    I have three initial uses for Git Planned.
    1) Helping a friend on GitHub port his non-gradle Android app into the Android Studio 3 IDE and version control it. Then possibly port his Java code to Kotlin. 2) Start formal version control of my own Adroid App Code 3) Begin teaming with other Android developers on colaborative projects